Javascript and there features:
1.High Level 
   Javascript will take care of memory allocation. Just we need to focus on code.
2.Garbage-collected - (unused variables)
   Javascript will take of garbage allocation.
3.Interpreted - just in time compiler 
   //Interpreter - javascript will convert into machine code in line by line execution 
    JIT - just in time compiler - Angular/reactjs/vuejs
4.Multi-paradigm
javascript follows multipradigm 
      procedure language :-
      example:
      let a = 4;
      let b = 5;
      let result = a + b;
      object oriented language :-
          class Expense{
            constructor(){

            }
          }
         * es6 introduce the features of class in 2015
          *js introduse in 1993 with object oriented
      functional programming :-
       [].find()
       [].map()
       [].filter()
advantage of using functional programming is thatgive the input and give the output
5  * .Protottype :- it is inheritance  based object-oriented
     Initial days - By using function we can create objects 
     Protottype - inheritance and inheritance is based on function
6.First class function 
       //you can pass function as argument or you can treat function as variable 
       //function as treated as variable
        let object ={
            addition:function(a, b){ //function is stored in variable  is first class function 
                  return a+b;
            }
        }

        //function as treated as argument
        function display(a,result){
            result();
        }
        function result(){

        }
        display(34,result)
7.Dynamic language:-
you can change the data type of variable
       let a = 45; 
        a = "akash";
        this is the drawback and how to overcome with this by using typescript
        //Typescript static datatype 
8.single thread (memory allocation to excute the code)
single thread means it allocated only one memory allocation
     Entire javascript code is running on single thread
single thread means not entire browser just one tab is one single thread and other tab is other single thread
9.Non blocking event loop 
      Any sync and async code will not block the program execution and it is taken care by event loop
============================
Javascript Engine 
1.Call stack (program in execution)
    LIFO
    sychronouse will be excuted first inside stack
    async code will be moved to queue once it ready again will bring back that data
2.calback queue (callback function,timers,fetch)
anything will be in call stack queue whoose is in waiting time  
    FIFO
3.event loop
it is like a manager 
 * it will take a data and put it somewhere else
   * infinite
4.webapi 
in webapi everything is stored who is importing from the webapi
     DOM,timers,fetch api
5.heap 
  //array and object kept inside this memory
  it is allocated  data in contigous memory
6.Execution context 
===========================================
Execution Context
what is execution context:-
when js starting to excuting then first anonymous function will be created that is execution context how it is work ? all the variable declare in outside and all the function entry will be there (all these things are happens before the execution means at creation time 
When the JavaScript engine scans a script file, it makes an environment called the Execution Context that handles the entire transformation and execution of the code
each function is in execution context
*inside execution code three things will be 1 variable,scope chain,this keyword 
1.variable environment 
   let,const,var ,functions,arguments
2.scope chain 

3.this keyword 
method -method means function inside the object , this will refer to current object
simple function =this keyword will be undefinde
arrow function- parent function - window object
//normal function this keyword will be created
//arrow function this keyword will not be created instead it will be borrow from parent function.
=========================================================
Scope chain 
1.Global Scope 
2.Function Scope 
3.Block Scope - (es6)
=======================================================
interview based question
UI - Dropdown, Accordion
⚡️Browser - Cookies, HTTP
⚡️DOM & CSS - Position, Flexbox
⚡️Output - Scope, Closures, Async
⚡️Polyfills - Promise.all, Flatten Array
⚡️Asynchronous - Callbacks, Promises
==============================================================ques:- explain pass by value and pass by refrence
In JavaScript, primitive data types are passed by value and non-primitive(array,object) data types are passed by reference.

example
function callByValue(num){
num=5;
console.log(num);
}
const x=8;
callbyValue(x);
console.log(x); //output
function callByRef(obj){
obj.name="newton";
console.log(obj);
}
let emp={
name:"jasmeen";
}
callByRef(obj)
console.log(obj);


